// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SAM.T.Worker.Data;

#nullable disable

namespace SAM.T.Worker.Migrations
{
    [DbContext(typeof(MonitoringContext))]
    partial class MonitoringContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SAM.T.Worker.Data.Models.HealthCheckRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Feature")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<int>("MonitoringResultId")
                        .HasColumnType("integer");

                    b.Property<int?>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MonitoringResultId");

                    b.ToTable("HealthCheckRecords");
                });

            modelBuilder.Entity("SAM.T.Worker.Data.Models.MonitoredApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProxyPassword")
                        .HasColumnType("text");

                    b.Property<int?>("ProxyPort")
                        .HasColumnType("integer");

                    b.Property<string>("ProxyUrl")
                        .HasColumnType("text");

                    b.Property<string>("ProxyUsername")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("UseProxy")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("MonitoredApplications");
                });

            modelBuilder.Entity("SAM.T.Worker.Data.Models.MonitoringResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Fail")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<int>("MonitoredApplicationId")
                        .HasColumnType("integer");

                    b.Property<int>("ResponseCode")
                        .HasColumnType("integer");

                    b.Property<long>("ResponseTime")
                        .HasColumnType("bigint");

                    b.Property<double>("ResponseTimeDeviation")
                        .HasColumnType("double precision");

                    b.Property<int?>("State")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MonitoredApplicationId");

                    b.ToTable("MonitoringResults");
                });

            modelBuilder.Entity("SAM.T.Worker.Data.Models.HealthCheckRecord", b =>
                {
                    b.HasOne("SAM.T.Worker.Data.Models.MonitoringResult", "MonitoringResult")
                        .WithMany("Inner")
                        .HasForeignKey("MonitoringResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MonitoringResult");
                });

            modelBuilder.Entity("SAM.T.Worker.Data.Models.MonitoringResult", b =>
                {
                    b.HasOne("SAM.T.Worker.Data.Models.MonitoredApplication", "MonitoredApplication")
                        .WithMany()
                        .HasForeignKey("MonitoredApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MonitoredApplication");
                });

            modelBuilder.Entity("SAM.T.Worker.Data.Models.MonitoringResult", b =>
                {
                    b.Navigation("Inner");
                });
#pragma warning restore 612, 618
        }
    }
}
